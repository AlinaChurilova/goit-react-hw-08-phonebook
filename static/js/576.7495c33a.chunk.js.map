{"version":3,"file":"static/js/576.7495c33a.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contactsSelectors.js","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","components/ContactList/ContactList.js","views/ContactsView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"ContactForm_Form__IBmOq\",\"Label\":\"ContactForm_Label__ykus5\",\"Input\":\"ContactForm_Input__+bOEZ\",\"Button\":\"ContactForm_Button__jJDZH\"};","// import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.contacts;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getIsRefreshing = state => state.contacts.isRefreshing;\n\n// const getVisibleContacts = createSelector(\n//     [getAllContacts, getFilter],\n//     (contacts, filter) => {\n//         const normalizedFilter = filter.toLocaleLowerCase();\n//         return contacts.filter(contact =>\n//             contact.name.toLocaleLowerCase().includes(normalizedFilter),\n//         );\n//     },\n// );\n// const contactsSelectors = { getLoading, getFilter, getAllContacts, getVisibleContacts };\n// export default  contactsSelectors;","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport s from './ContactForm.module.css';\n// import { useAddContactMutation, useGetContactsQuery } from '../../redux/contactsSlice';\nimport * as contactsOperations from '../../redux/contactsOperations';\nimport * as contactsSelectors from '../../redux/contactsSelectors';\n\n\nconst ContactForm = () => {\n\n    // const { data } = useGetContactsQuery();\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    // const [addContact] = useAddContactMutation();\n    const dispatch = useDispatch();\n    const contacts = useSelector(contactsSelectors.getContacts);\n    // const isRefreshing = useSelector(contactsSelectors.getIsRefreshing);\n    \n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const savedName = contacts && contacts.find(Cont => Cont.name === name);\n        if (savedName !== undefined) {\n            alert(`${name} is already in contacts!`);\n            return;\n        } else {\n            dispatch(contactsOperations.addContact({ name, number }));\n            setName('');\n            setNumber('');\n        }\n    }\n\n\n    return (\n        <form className={s.Form} onSubmit = {handleSubmit}>\n            <label className={s.Label}>\n            Name \n                <input className={s.Input}\n          type=\"text\"\n          value={name}\n          onChange = {e => setName(e.target.value)}\n\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer,\n           Charles de Batz de Castelmore d'Artagnan\"\n          required\n                />\n            </label>\n                \n            <label className={s.Label}>\n            Number \n                <input className={s.Input}\n            type=\"tel\"\n            value={number}\n            onChange={e => setNumber(e.target.value)}\n                        \n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n                />\n            </label>\n  \n          <button className={s.Button} type='submit'>Add contact</button>\n        </form> \n\n    )\n}\n\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"ListItem\":\"ContactList_ListItem__jwRoa\",\"List\":\"ContactList_List__gG+lN\",\"BtnDelate\":\"ContactList_BtnDelate__jEP57\"};","// extracted by mini-css-extract-plugin\nexport default {\"Label\":\"Filter_Label__MldcW\",\"Input\":\"Filter_Input__fqOVl\"};","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\n\nconst Filter = ({ value, onFilter }) => {\n\n \n    return <label className={s.Label}>\n            Find contacts by name \n                <input className={s.Input}\n          type=\"text\"\n          value={value}\n          onChange = {e=> onFilter(e.currentTarget.value)}\n                />\n            </label>\n}\n\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n}\n\nexport default Filter;","import React from \"react\";\nimport s from './ContactList.module.css';\nimport { useState, useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch} from 'react-redux';\n// import { useGetContactsQuery, useDeleteContactMutation } from '../../redux/contactsSlice';\nimport * as contactsOperations from '../../redux/contactsOperations';\nimport * as contactsSelectors from '../../redux/contactsSelectors';\nimport Filter from '../Filter';\n\nconst ContactList = () => {\n    // const { data} = useGetContactsQuery();\n    const [filter, setFilter] = useState('');\n    // const [deleteContact] = useDeleteContactMutation();\n    const dispatch = useDispatch();\n    const contactList = useSelector(contactsSelectors.getContacts);\n\n    const filteredContacts = useMemo(() => {\n        return contactList?.filter(contact =>\n            contact.name.toLocaleLowerCase().includes(filter.toLowerCase())) ?? [];\n    }, [filter, contactList]);\n    \n    const contacts = filter.length ? filteredContacts : contactList;\n\n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts())\n    }, [dispatch]);\n    \n    return (<>\n        <Filter value={ filter} onFilter={setFilter} />\n        <ul className={s.List} >\n            {contacts?.length ? contacts?.map(({ id, name, number }) => (\n                <li key={id} className={s.ListItem} >\n                    {name}: {number}\n                    <button className={s.BtnDelate} onClick={() => dispatch(contactsOperations.deleteContact(id))} >Delete</button>\n                </li>\n            )): <span>Phonebook empty!</span>}\n        </ul>\n    </>\n    )\n}\nexport default ContactList;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport * as contactsOperations from '../redux/contactsOperations';\nimport * as contactsSelectors from '../redux/contactsSelectors';\n\n\nconst barStyles = {\n  paddingLeft: 20,\n};\n\nexport default function TodosView(params) {\n  const dispatch = useDispatch();\n  const isLoadingContacts = useSelector(contactsSelectors.getIsLoading);\n\n\n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts())\n    }, [dispatch]);\n\n  return (\n    <>\n      <div style={barStyles}>\n        <h1>Phonebook</h1>\n        <ContactForm/>\n        <h2>Contacts</h2>\n              \n        {isLoadingContacts && <h1>Loading...</h1>}\n        <ContactList />\n        </div>\n    </>\n  );\n}\n"],"names":["getContacts","state","contacts","getIsLoading","isLoading","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","contactsSelectors","className","s","onSubmit","e","preventDefault","undefined","find","Cont","contactsOperations","alert","type","value","onChange","target","pattern","title","required","onFilter","currentTarget","filter","setFilter","contactList","filteredContacts","useMemo","contact","toLocaleLowerCase","includes","toLowerCase","length","useEffect","map","id","onClick","barStyles","paddingLeft","TodosView","params","isLoadingContacts","style"],"sourceRoot":""}